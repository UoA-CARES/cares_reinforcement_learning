
import os
import copy
import torch
import logging
import numpy as np
import torch.nn.functional as F


class DoubleDQN:

    def __init__(self,
                 network,
                 gamma,
                 tau,
                 device):

        self.network = network.to(device)
        self.target_network = copy.deepcopy(self.network).to(device)

        self.gamma  = gamma
        self.tau    = tau
        self.device = device

    def select_action_from_policy(self, state):
        with torch.no_grad():
            state_tensor = torch.FloatTensor(state).to(self.device)
            state_tensor = state_tensor.unsqueeze(0)
            q_values = self.network(state_tensor)
            action   = torch.argmax(q_values).item()
        return action

    def train_policy(self, experiences):
        states, actions, rewards, next_states, dones = experiences

        # Convert into tensor
        states      = torch.FloatTensor(np.asarray(states)).to(self.device)
        actions     = torch.LongTensor(np.asarray(actions)).to(self.device)
        rewards     = torch.FloatTensor(np.asarray(rewards)).to(self.device)
        next_states = torch.FloatTensor(np.asarray(next_states)).to(self.device)
        dones       = torch.LongTensor(np.asarray(dones)).to(self.device)

        q_values = self.network(states)
        next_q_values_prime = self.target_network(next_states)

        '''
        Selected using the Q values generated by the main network (Q)
        Returns a 1D tensor of the q values reflecting the actions that the agent took at that state in the past
        '''
        q_values_of_actions_taken = q_values[torch.arange(q_values.size(0)), actions]

        '''
        Select the best action to take, given the q values generated by the target network (Q')
        Returns a 1D tensor of the best action to take given the state
        '''
        actions_prime = torch.argmax(next_q_values_prime, dim=1)

        next_q_values = self.network(next_states)
        '''
        Using the actions_prime generated by the target network, select the q values of taking action prime (a') 
        generated using the target network, given the state
        Returns a 1D Tensor of q values generated using the main network (Q) at time T + 1 given action prime (a')
        '''
        next_q_values_of_actions_taken = next_q_values[torch.arange(next_q_values.size(0)), actions_prime]

        q_target = rewards + self.gamma * (1 - dones) * next_q_values_of_actions_taken

        loss = F.mse_loss(q_values_of_actions_taken, q_target)
        self.network.optimiser.zero_grad()
        loss.backward()
        self.network.optimiser.step()


        for target_param, param in zip(self.target_network.parameters(), self.network.parameters()):
            target_param.data.copy_(param.data * self.tau + target_param.data * (1.0 - self.tau))


    def save_models(self, filename):
        dir_exists = os.path.exists("models")

        if not dir_exists:
            os.makedirs("models")
        torch.save(self.network.state_dict(),  f'models/{filename}_network.pht')
        logging.info("models has been loaded...")

